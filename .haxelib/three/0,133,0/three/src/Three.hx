package three.src;

@:jsRequire("three/src/Three") @valueModuleOnly extern class Three {
	static final REVISION : String;
	static final CullFaceNone : three.CullFace;
	static final CullFaceBack : three.CullFace;
	static final CullFaceFront : three.CullFace;
	static final CullFaceFrontBack : three.CullFace;
	static final BasicShadowMap : three.ShadowMapType;
	static final PCFShadowMap : three.ShadowMapType;
	static final PCFSoftShadowMap : three.ShadowMapType;
	static final VSMShadowMap : three.ShadowMapType;
	static final FrontSide : three.Side;
	static final BackSide : three.Side;
	static final DoubleSide : three.Side;
	static final FlatShading : three.Shading;
	static final SmoothShading : three.Shading;
	static final NoBlending : three.Blending;
	static final NormalBlending : three.Blending;
	static final AdditiveBlending : three.Blending;
	static final SubtractiveBlending : three.Blending;
	static final MultiplyBlending : three.Blending;
	static final CustomBlending : three.Blending;
	static final AddEquation : three.BlendingEquation;
	static final SubtractEquation : three.BlendingEquation;
	static final ReverseSubtractEquation : three.BlendingEquation;
	static final MinEquation : three.BlendingEquation;
	static final MaxEquation : three.BlendingEquation;
	static final ZeroFactor : three.BlendingDstFactor;
	static final OneFactor : three.BlendingDstFactor;
	static final SrcColorFactor : three.BlendingDstFactor;
	static final OneMinusSrcColorFactor : three.BlendingDstFactor;
	static final SrcAlphaFactor : three.BlendingDstFactor;
	static final OneMinusSrcAlphaFactor : three.BlendingDstFactor;
	static final DstAlphaFactor : three.BlendingDstFactor;
	static final OneMinusDstAlphaFactor : three.BlendingDstFactor;
	static final DstColorFactor : three.BlendingDstFactor;
	static final OneMinusDstColorFactor : three.BlendingDstFactor;
	static final SrcAlphaSaturateFactor : three.BlendingSrcFactor;
	static final NeverDepth : three.DepthModes;
	static final AlwaysDepth : three.DepthModes;
	static final LessDepth : three.DepthModes;
	static final LessEqualDepth : three.DepthModes;
	static final EqualDepth : three.DepthModes;
	static final GreaterEqualDepth : three.DepthModes;
	static final GreaterDepth : three.DepthModes;
	static final NotEqualDepth : three.DepthModes;
	static final MultiplyOperation : three.Combine;
	static final MixOperation : three.Combine;
	static final AddOperation : three.Combine;
	static final NoToneMapping : three.ToneMapping;
	static final LinearToneMapping : three.ToneMapping;
	static final ReinhardToneMapping : three.ToneMapping;
	static final CineonToneMapping : three.ToneMapping;
	static final ACESFilmicToneMapping : three.ToneMapping;
	static final UVMapping : three.Mapping;
	static final CubeReflectionMapping : three.Mapping;
	static final CubeRefractionMapping : three.Mapping;
	static final EquirectangularReflectionMapping : three.Mapping;
	static final EquirectangularRefractionMapping : three.Mapping;
	static final CubeUVReflectionMapping : three.Mapping;
	static final CubeUVRefractionMapping : three.Mapping;
	static final RepeatWrapping : three.Wrapping;
	static final ClampToEdgeWrapping : three.Wrapping;
	static final MirroredRepeatWrapping : three.Wrapping;
	static final NearestFilter : three.TextureFilter;
	static final NearestMipmapNearestFilter : three.TextureFilter;
	static final NearestMipMapNearestFilter : three.TextureFilter;
	static final NearestMipmapLinearFilter : three.TextureFilter;
	static final NearestMipMapLinearFilter : three.TextureFilter;
	static final LinearFilter : three.TextureFilter;
	static final LinearMipmapNearestFilter : three.TextureFilter;
	static final LinearMipMapNearestFilter : three.TextureFilter;
	static final LinearMipmapLinearFilter : three.TextureFilter;
	static final LinearMipMapLinearFilter : three.TextureFilter;
	static final UnsignedByteType : three.TextureDataType;
	static final ByteType : three.TextureDataType;
	static final ShortType : three.TextureDataType;
	static final UnsignedShortType : three.TextureDataType;
	static final IntType : three.TextureDataType;
	static final UnsignedIntType : three.TextureDataType;
	static final FloatType : three.TextureDataType;
	static final HalfFloatType : three.TextureDataType;
	static final UnsignedShort4444Type : three.TextureDataType;
	static final UnsignedShort5551Type : three.TextureDataType;
	static final UnsignedShort565Type : three.TextureDataType;
	static final UnsignedInt248Type : three.TextureDataType;
	static final AlphaFormat : three.PixelFormat;
	static final RGBFormat : three.PixelFormat;
	static final RGBAFormat : three.PixelFormat;
	static final LuminanceFormat : three.PixelFormat;
	static final LuminanceAlphaFormat : three.PixelFormat;
	static final RGBEFormat : three.PixelFormat;
	static final DepthFormat : three.PixelFormat;
	static final DepthStencilFormat : three.PixelFormat;
	static final RedFormat : three.PixelFormat;
	static final RedIntegerFormat : three.PixelFormat;
	static final RGFormat : three.PixelFormat;
	static final RGIntegerFormat : three.PixelFormat;
	static final RGBIntegerFormat : three.PixelFormat;
	static final RGBAIntegerFormat : three.PixelFormat;
	static final RGB_S3TC_DXT1_Format : three.CompressedPixelFormat;
	static final RGBA_S3TC_DXT1_Format : three.CompressedPixelFormat;
	static final RGBA_S3TC_DXT3_Format : three.CompressedPixelFormat;
	static final RGBA_S3TC_DXT5_Format : three.CompressedPixelFormat;
	static final RGB_PVRTC_4BPPV1_Format : three.CompressedPixelFormat;
	static final RGB_PVRTC_2BPPV1_Format : three.CompressedPixelFormat;
	static final RGBA_PVRTC_4BPPV1_Format : three.CompressedPixelFormat;
	static final RGBA_PVRTC_2BPPV1_Format : three.CompressedPixelFormat;
	static final RGB_ETC1_Format : three.CompressedPixelFormat;
	static final RGB_ETC2_Format : three.CompressedPixelFormat;
	static final RGBA_ETC2_EAC_Format : three.CompressedPixelFormat;
	static final RGBA_ASTC_4x4_Format : three.CompressedPixelFormat;
	static final RGBA_ASTC_5x4_Format : three.CompressedPixelFormat;
	static final RGBA_ASTC_5x5_Format : three.CompressedPixelFormat;
	static final RGBA_ASTC_6x5_Format : three.CompressedPixelFormat;
	static final RGBA_ASTC_6x6_Format : three.CompressedPixelFormat;
	static final RGBA_ASTC_8x5_Format : three.CompressedPixelFormat;
	static final RGBA_ASTC_8x6_Format : three.CompressedPixelFormat;
	static final RGBA_ASTC_8x8_Format : three.CompressedPixelFormat;
	static final RGBA_ASTC_10x5_Format : three.CompressedPixelFormat;
	static final RGBA_ASTC_10x6_Format : three.CompressedPixelFormat;
	static final RGBA_ASTC_10x8_Format : three.CompressedPixelFormat;
	static final RGBA_ASTC_10x10_Format : three.CompressedPixelFormat;
	static final RGBA_ASTC_12x10_Format : three.CompressedPixelFormat;
	static final RGBA_ASTC_12x12_Format : three.CompressedPixelFormat;
	static final SRGB8_ALPHA8_ASTC_4x4_Format : three.CompressedPixelFormat;
	static final SRGB8_ALPHA8_ASTC_5x4_Format : three.CompressedPixelFormat;
	static final SRGB8_ALPHA8_ASTC_5x5_Format : three.CompressedPixelFormat;
	static final SRGB8_ALPHA8_ASTC_6x5_Format : three.CompressedPixelFormat;
	static final SRGB8_ALPHA8_ASTC_6x6_Format : three.CompressedPixelFormat;
	static final SRGB8_ALPHA8_ASTC_8x5_Format : three.CompressedPixelFormat;
	static final SRGB8_ALPHA8_ASTC_8x6_Format : three.CompressedPixelFormat;
	static final SRGB8_ALPHA8_ASTC_8x8_Format : three.CompressedPixelFormat;
	static final SRGB8_ALPHA8_ASTC_10x5_Format : three.CompressedPixelFormat;
	static final SRGB8_ALPHA8_ASTC_10x6_Format : three.CompressedPixelFormat;
	static final SRGB8_ALPHA8_ASTC_10x8_Format : three.CompressedPixelFormat;
	static final SRGB8_ALPHA8_ASTC_10x10_Format : three.CompressedPixelFormat;
	static final SRGB8_ALPHA8_ASTC_12x10_Format : three.CompressedPixelFormat;
	static final SRGB8_ALPHA8_ASTC_12x12_Format : three.CompressedPixelFormat;
	static final RGBA_BPTC_Format : three.CompressedPixelFormat;
	static final LoopOnce : three.AnimationActionLoopStyles;
	static final LoopRepeat : three.AnimationActionLoopStyles;
	static final LoopPingPong : three.AnimationActionLoopStyles;
	static final InterpolateDiscrete : three.InterpolationModes;
	static final InterpolateLinear : three.InterpolationModes;
	static final InterpolateSmooth : three.InterpolationModes;
	static final ZeroCurvatureEnding : three.InterpolationEndingModes;
	static final ZeroSlopeEnding : three.InterpolationEndingModes;
	static final WrapAroundEnding : three.InterpolationEndingModes;
	static final NormalAnimationBlendMode : three.AnimationBlendMode;
	static final AdditiveAnimationBlendMode : three.AnimationBlendMode;
	static final TrianglesDrawMode : three.TrianglesDrawModes;
	static final TriangleStripDrawMode : three.TrianglesDrawModes;
	static final TriangleFanDrawMode : three.TrianglesDrawModes;
	static final LinearEncoding : three.TextureEncoding;
	static final sRGBEncoding : three.TextureEncoding;
	static final GammaEncoding : three.TextureEncoding;
	static final RGBEEncoding : three.TextureEncoding;
	static final LogLuvEncoding : three.TextureEncoding;
	static final RGBM7Encoding : three.TextureEncoding;
	static final RGBM16Encoding : three.TextureEncoding;
	static final RGBDEncoding : three.TextureEncoding;
	static final BasicDepthPacking : three.DepthPackingStrategies;
	static final RGBADepthPacking : three.DepthPackingStrategies;
	static final TangentSpaceNormalMap : three.NormalMapTypes;
	static final ObjectSpaceNormalMap : three.NormalMapTypes;
	static final ZeroStencilOp : three.StencilOp;
	static final KeepStencilOp : three.StencilOp;
	static final ReplaceStencilOp : three.StencilOp;
	static final IncrementStencilOp : three.StencilOp;
	static final DecrementStencilOp : three.StencilOp;
	static final IncrementWrapStencilOp : three.StencilOp;
	static final DecrementWrapStencilOp : three.StencilOp;
	static final InvertStencilOp : three.StencilOp;
	static final NeverStencilFunc : three.StencilFunc;
	static final LessStencilFunc : three.StencilFunc;
	static final EqualStencilFunc : three.StencilFunc;
	static final LessEqualStencilFunc : three.StencilFunc;
	static final GreaterStencilFunc : three.StencilFunc;
	static final NotEqualStencilFunc : three.StencilFunc;
	static final GreaterEqualStencilFunc : three.StencilFunc;
	static final AlwaysStencilFunc : three.StencilFunc;
	static final StaticDrawUsage : three.Usage;
	static final DynamicDrawUsage : three.Usage;
	static final StreamDrawUsage : three.Usage;
	static final StaticReadUsage : three.Usage;
	static final DynamicReadUsage : three.Usage;
	static final StreamReadUsage : three.Usage;
	static final StaticCopyUsage : three.Usage;
	static final DynamicCopyUsage : three.Usage;
	static final StreamCopyUsage : three.Usage;
	static final GLSL1 : three.GLSLVersion;
	static final GLSL3 : three.GLSLVersion;
	static final DefaultLoadingManager : three.LoadingManager;
	static final LoaderUtils : three.LoaderUtils;
	static final LineStrip : Float;
	static final LinePieces : Float;
	static var ShaderLib : {
		var basic : three.Shader;
		var lambert : three.Shader;
		var phong : three.Shader;
		var standard : three.Shader;
		var matcap : three.Shader;
		var points : three.Shader;
		var dashed : three.Shader;
		var depth : three.Shader;
		var normal : three.Shader;
		var sprite : three.Shader;
		var background : three.Shader;
		var cube : three.Shader;
		var equirect : three.Shader;
		var distanceRGBA : three.Shader;
		var shadow : three.Shader;
		var physical : three.Shader;
	};
	static var UniformsLib : {
		var common : {
			var diffuse : three.IUniform<Dynamic>;
			var opacity : three.IUniform<Dynamic>;
			var map : three.IUniform<Dynamic>;
			var uvTransform : three.IUniform<Dynamic>;
			var uv2Transform : three.IUniform<Dynamic>;
			var alphaMap : three.IUniform<Dynamic>;
		};
		var specularmap : {
			var specularMap : three.IUniform<Dynamic>;
		};
		var envmap : {
			var envMap : three.IUniform<Dynamic>;
			var flipEnvMap : three.IUniform<Dynamic>;
			var reflectivity : three.IUniform<Dynamic>;
			var refractionRatio : three.IUniform<Dynamic>;
			var maxMipLevel : three.IUniform<Dynamic>;
		};
		var aomap : {
			var aoMap : three.IUniform<Dynamic>;
			var aoMapIntensity : three.IUniform<Dynamic>;
		};
		var lightmap : {
			var lightMap : three.IUniform<Dynamic>;
			var lightMapIntensity : three.IUniform<Dynamic>;
		};
		var emissivemap : {
			var emissiveMap : three.IUniform<Dynamic>;
		};
		var bumpmap : {
			var bumpMap : three.IUniform<Dynamic>;
			var bumpScale : three.IUniform<Dynamic>;
		};
		var normalmap : {
			var normalMap : three.IUniform<Dynamic>;
			var normalScale : three.IUniform<Dynamic>;
		};
		var displacementmap : {
			var displacementMap : three.IUniform<Dynamic>;
			var displacementScale : three.IUniform<Dynamic>;
			var displacementBias : three.IUniform<Dynamic>;
		};
		var roughnessmap : {
			var roughnessMap : three.IUniform<Dynamic>;
		};
		var metalnessmap : {
			var metalnessMap : three.IUniform<Dynamic>;
		};
		var gradientmap : {
			var gradientMap : three.IUniform<Dynamic>;
		};
		var fog : {
			var fogDensity : three.IUniform<Dynamic>;
			var fogNear : three.IUniform<Dynamic>;
			var fogFar : three.IUniform<Dynamic>;
			var fogColor : three.IUniform<Dynamic>;
		};
		var lights : {
			var ambientLightColor : three.IUniform<Dynamic>;
			var directionalLights : {
				var value : Array<Dynamic>;
				var properties : {
					var direction : { };
					var color : { };
				};
			};
			var directionalLightShadows : {
				var value : Array<Dynamic>;
				var properties : {
					var shadowBias : { };
					var shadowNormalBias : { };
					var shadowRadius : { };
					var shadowMapSize : { };
				};
			};
			var directionalShadowMap : three.IUniform<Dynamic>;
			var directionalShadowMatrix : three.IUniform<Dynamic>;
			var spotLights : {
				var value : Array<Dynamic>;
				var properties : {
					var color : { };
					var position : { };
					var direction : { };
					var distance : { };
					var coneCos : { };
					var penumbraCos : { };
					var decay : { };
				};
			};
			var spotLightShadows : {
				var value : Array<Dynamic>;
				var properties : {
					var shadowBias : { };
					var shadowNormalBias : { };
					var shadowRadius : { };
					var shadowMapSize : { };
				};
			};
			var spotShadowMap : three.IUniform<Dynamic>;
			var spotShadowMatrix : three.IUniform<Dynamic>;
			var pointLights : {
				var value : Array<Dynamic>;
				var properties : {
					var color : { };
					var position : { };
					var decay : { };
					var distance : { };
				};
			};
			var pointLightShadows : {
				var value : Array<Dynamic>;
				var properties : {
					var shadowBias : { };
					var shadowNormalBias : { };
					var shadowRadius : { };
					var shadowMapSize : { };
				};
			};
			var pointShadowMap : three.IUniform<Dynamic>;
			var pointShadowMatrix : three.IUniform<Dynamic>;
			var hemisphereLights : {
				var value : Array<Dynamic>;
				var properties : {
					var direction : { };
					var skycolor : { };
					var groundColor : { };
				};
			};
			var rectAreaLights : {
				var value : Array<Dynamic>;
				var properties : {
					var color : { };
					var position : { };
					var width : { };
					var height : { };
				};
			};
		};
		var points : {
			var diffuse : three.IUniform<Dynamic>;
			var opacity : three.IUniform<Dynamic>;
			var size : three.IUniform<Dynamic>;
			var scale : three.IUniform<Dynamic>;
			var map : three.IUniform<Dynamic>;
			var uvTransform : three.IUniform<Dynamic>;
		};
	};
	static function cloneUniforms(uniforms_src:Dynamic):Dynamic;
	static function mergeUniforms(uniforms:Array<Dynamic>):Dynamic;
	static var ShaderChunk : {
		var alphamap_fragment : String;
		var alphamap_pars_fragment : String;
		var alphatest_fragment : String;
		var aomap_fragment : String;
		var aomap_pars_fragment : String;
		var begin_vertex : String;
		var beginnormal_vertex : String;
		var bsdfs : String;
		var bumpmap_pars_fragment : String;
		var clipping_planes_fragment : String;
		var clipping_planes_pars_fragment : String;
		var clipping_planes_pars_vertex : String;
		var clipping_planes_vertex : String;
		var color_fragment : String;
		var color_pars_fragment : String;
		var color_pars_vertex : String;
		var color_vertex : String;
		var common : String;
		var cube_frag : String;
		var cube_vert : String;
		var cube_uv_reflection_fragment : String;
		var defaultnormal_vertex : String;
		var depth_frag : String;
		var depth_vert : String;
		var distanceRGBA_frag : String;
		var distanceRGBA_vert : String;
		var displacementmap_vertex : String;
		var displacementmap_pars_vertex : String;
		var emissivemap_fragment : String;
		var emissivemap_pars_fragment : String;
		var encodings_pars_fragment : String;
		var encodings_fragment : String;
		var envmap_fragment : String;
		var envmap_common_pars_fragment : String;
		var envmap_pars_fragment : String;
		var envmap_pars_vertex : String;
		var envmap_vertex : String;
		var equirect_frag : String;
		var equirect_vert : String;
		var fog_fragment : String;
		var fog_pars_fragment : String;
		var linedashed_frag : String;
		var linedashed_vert : String;
		var lightmap_fragment : String;
		var lightmap_pars_fragment : String;
		var lights_lambert_vertex : String;
		var lights_pars_begin : String;
		var envmap_physical_pars_fragment : String;
		var lights_pars_map : String;
		var lights_phong_fragment : String;
		var lights_phong_pars_fragment : String;
		var lights_physical_fragment : String;
		var lights_physical_pars_fragment : String;
		var lights_fragment_begin : String;
		var lights_fragment_maps : String;
		var lights_fragment_end : String;
		var logdepthbuf_fragment : String;
		var logdepthbuf_pars_fragment : String;
		var logdepthbuf_pars_vertex : String;
		var logdepthbuf_vertex : String;
		var map_fragment : String;
		var map_pars_fragment : String;
		var map_particle_fragment : String;
		var map_particle_pars_fragment : String;
		var meshbasic_frag : String;
		var meshbasic_vert : String;
		var meshlambert_frag : String;
		var meshlambert_vert : String;
		var meshphong_frag : String;
		var meshphong_vert : String;
		var meshphysical_frag : String;
		var meshphysical_vert : String;
		var metalnessmap_fragment : String;
		var metalnessmap_pars_fragment : String;
		var morphnormal_vertex : String;
		var morphtarget_pars_vertex : String;
		var morphtarget_vertex : String;
		var normal_flip : String;
		var normal_frag : String;
		var normal_fragment_begin : String;
		var normal_fragment_maps : String;
		var normal_vert : String;
		var normalmap_pars_fragment : String;
		var clearcoat_normal_fragment_begin : String;
		var clearcoat_normal_fragment_maps : String;
		var clearcoat_pars_fragment : String;
		var packing : String;
		var points_frag : String;
		var points_vert : String;
		var shadow_frag : String;
		var shadow_vert : String;
		var premultiplied_alpha_fragment : String;
		var project_vertex : String;
		var roughnessmap_fragment : String;
		var roughnessmap_pars_fragment : String;
		var shadowmap_pars_fragment : String;
		var shadowmap_pars_vertex : String;
		var shadowmap_vertex : String;
		var shadowmask_pars_fragment : String;
		var skinbase_vertex : String;
		var skinning_pars_vertex : String;
		var skinning_vertex : String;
		var skinnormal_vertex : String;
		var specularmap_fragment : String;
		var specularmap_pars_fragment : String;
		var tonemapping_fragment : String;
		var tonemapping_pars_fragment : String;
		var uv2_pars_fragment : String;
		var uv2_pars_vertex : String;
		var uv2_vertex : String;
		var uv_pars_fragment : String;
		var uv_pars_vertex : String;
		var uv_vertex : String;
		var worldpos_vertex : String;
	};
	static function WebGLShader(gl:js.html.webgl.RenderingContext, type:String, string:String):js.html.webgl.Shader;
}